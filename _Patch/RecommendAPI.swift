//
// RecommendAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import PromiseKit



open class RecommendAPI {
    /**
     レコメンドクリック通知
     - parameter merch: (query) 固定値      - parameter cookie: (query) subの値をcookieIDとして指定      - parameter spec: (query) クリックしたレコメンド枠specID      - parameter prod: (query) クリックした案件ID（求人カードID） (optional)     - parameter num: (query) 要求数 (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pycre5JsonRecommendGet(merch: String, cookie: String, spec: String, prod: String? = nil, num: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        pycre5JsonRecommendGetWithRequestBuilder(merch: merch, cookie: cookie, spec: spec, prod: prod, num: num).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     レコメンドクリック通知
     - parameter merch: (query) 固定値      - parameter cookie: (query) subの値をcookieIDとして指定      - parameter spec: (query) クリックしたレコメンド枠specID      - parameter prod: (query) クリックした案件ID（求人カードID） (optional)     - parameter num: (query) 要求数 (optional)
     - returns: Promise<Void>
     */
    open class func pycre5JsonRecommendGet( merch: String,  cookie: String,  spec: String,  prod: String? = nil,  num: Int? = nil) -> Promise<Void> {
        //let deferred = Promise<Void>.pending()
        let (promise, resolver) = Promise<Void>.pending()
        pycre5JsonRecommendGet(merch: merch, cookie: cookie, spec: spec, prod: prod, num: num) { data, error in
            if let error = error {
                //deferred.reject(error)
                resolver.reject(error)
            } else {
                //deferred.fulfill(data!)
                resolver.fulfill(data!)
            }
        }
        //return deferred.promise
        return promise
    }

    /**
     レコメンドクリック通知
     - GET /pycre5/json/recommend
     - 求人詳細を表示させるときに叩く
     - parameter merch: (query) 固定値      - parameter cookie: (query) subの値をcookieIDとして指定      - parameter spec: (query) クリックしたレコメンド枠specID      - parameter prod: (query) クリックした案件ID（求人カードID） (optional)     - parameter num: (query) 要求数 (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func pycre5JsonRecommendGetWithRequestBuilder(merch: String, cookie: String, spec: String, prod: String? = nil, num: Int? = nil) -> RequestBuilder<Void> {
        let path = "/pycre5/json/recommend"
        let URLString = SERecommendAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        var _queryItems = APIHelper.mapValuesToQueryItems([
                        "prod": prod, 
                        "merch": merch, 
                        "cookie": cookie, 
                        "spec": spec, 
                        "num": num?.encodeToJSON()
        ])
        //=== ソートして[prod]を先頭に持ってくる
        _queryItems = _queryItems?.sorted(by: { (lv, rv) -> Bool in
            lv.name == "prod"
        })
        url?.queryItems = _queryItems
        ////=== 動作確認
        //if let _queryItems = url?.queryItems {
        //    for item in _queryItems {
        //        print(" *", item.name, item.value)
        //    }
        //}

        let requestBuilder: RequestBuilder<Void>.Type = SERecommendAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     コンバージョンクエリ
     - parameter prod: (query) クリックした案件ID（求人カードID）      - parameter merch: (query) 固定値      - parameter sku: (query) クリックした案件ID（求人カードID）      - parameter order: (query) yyyymmddhhmmssms(年月日時分秒ミリ秒)      - parameter qty: (query) 固定値「1」      - parameter price: (query) 固定値「1」      - parameter cust: (query) subの値を暗号化された顧客IDとして指定      - parameter cookie: (query) subの値をcookieIDとして指定      - parameter device: (query) 固定値「a」（アプリ） 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pycre5PurchaseGet(prod: String, merch: String, sku: String, order: String, qty: Int, price: Int, cust: String, cookie: String, device: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        pycre5PurchaseGetWithRequestBuilder(prod: prod, merch: merch, sku: sku, order: order, qty: qty, price: price, cust: cust, cookie: cookie, device: device).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     コンバージョンクエリ
     - parameter prod: (query) クリックした案件ID（求人カードID）      - parameter merch: (query) 固定値      - parameter sku: (query) クリックした案件ID（求人カードID）      - parameter order: (query) yyyymmddhhmmssms(年月日時分秒ミリ秒)      - parameter qty: (query) 固定値「1」      - parameter price: (query) 固定値「1」      - parameter cust: (query) subの値を暗号化された顧客IDとして指定      - parameter cookie: (query) subの値をcookieIDとして指定      - parameter device: (query) 固定値「a」（アプリ） 
     - returns: Promise<Void>
     */
    open class func pycre5PurchaseGet( prod: String,  merch: String,  sku: String,  order: String,  qty: Int,  price: Int,  cust: String,  cookie: String,  device: String) -> Promise<Void> {
        //let deferred = Promise<Void>.pending()
        let (promise, resolver) = Promise<Void>.pending()
        pycre5PurchaseGet(prod: prod, merch: merch, sku: sku, order: order, qty: qty, price: price, cust: cust, cookie: cookie, device: device) { data, error in
            if let error = error {
                //deferred.reject(error)
                resolver.reject(error)
            } else {
                //deferred.fulfill(data!)
                resolver.fulfill(data!)
            }
        }
        //return deferred.promise
        return promise
    }

    /**
     コンバージョンクエリ
     - GET /pycre5/purchase
     - 応募完了時に叩く
     - parameter prod: (query) クリックした案件ID（求人カードID）      - parameter merch: (query) 固定値      - parameter sku: (query) クリックした案件ID（求人カードID）      - parameter order: (query) yyyymmddhhmmssms(年月日時分秒ミリ秒)      - parameter qty: (query) 固定値「1」      - parameter price: (query) 固定値「1」      - parameter cust: (query) subの値を暗号化された顧客IDとして指定      - parameter cookie: (query) subの値をcookieIDとして指定      - parameter device: (query) 固定値「a」（アプリ） 

     - returns: RequestBuilder<Void> 
     */
    open class func pycre5PurchaseGetWithRequestBuilder(prod: String, merch: String, sku: String, order: String, qty: Int, price: Int, cust: String, cookie: String, device: String) -> RequestBuilder<Void> {
        let path = "/pycre5/purchase"
        let URLString = SERecommendAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        var _queryItems = APIHelper.mapValuesToQueryItems([
                        "prod": prod, 
                        "merch": merch, 
                        "sku": sku, 
                        "order": order, 
                        "qty": qty.encodeToJSON(), 
                        "price": price.encodeToJSON(), 
                        "cust": cust, 
                        "cookie": cookie, 
                        "device": device
        ])
        //=== ソートして[prod]を先頭に持ってくる
        _queryItems = _queryItems?.sorted(by: { (lv, rv) -> Bool in
            lv.name == "prod"
        })
        url?.queryItems = _queryItems
        ////=== 動作確認
        //if let _queryItems = url?.queryItems {
        //    for item in _queryItems {
        //        print(" *", item.name, item.value)
        //    }
        //}

        let requestBuilder: RequestBuilder<Void>.Type = SERecommendAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
