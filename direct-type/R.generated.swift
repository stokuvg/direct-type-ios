//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 11 storyboards.
  struct storyboard {
    /// Storyboard `BaseTabBC`.
    static let baseTabBC = _R.storyboard.baseTabBC()
    /// Storyboard `Edit`.
    static let edit = _R.storyboard.edit()
    /// Storyboard `EditablePopup`.
    static let editablePopup = _R.storyboard.editablePopup()
    /// Storyboard `EntryVC`.
    static let entryVC = _R.storyboard.entryVC()
    /// Storyboard `HomeVC`.
    static let homeVC = _R.storyboard.homeVC()
    /// Storyboard `JobOfferDetailVC`.
    static let jobOfferDetailVC = _R.storyboard.jobOfferDetailVC()
    /// Storyboard `KeepListVC`.
    static let keepListVC = _R.storyboard.keepListVC()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MyPageVC`.
    static let myPageVC = _R.storyboard.myPageVC()
    /// Storyboard `Preview`.
    static let preview = _R.storyboard.preview()
    /// Storyboard `SplashVC`.
    static let splashVC = _R.storyboard.splashVC()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "BaseTabBC", bundle: ...)`
    static func baseTabBC(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.baseTabBC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Edit", bundle: ...)`
    static func edit(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.edit)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "EditablePopup", bundle: ...)`
    static func editablePopup(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.editablePopup)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "EntryVC", bundle: ...)`
    static func entryVC(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.entryVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HomeVC", bundle: ...)`
    static func homeVC(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.homeVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "JobOfferDetailVC", bundle: ...)`
    static func jobOfferDetailVC(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.jobOfferDetailVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "KeepListVC", bundle: ...)`
    static func keepListVC(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.keepListVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MyPageVC", bundle: ...)`
    static func myPageVC(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.myPageVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Preview", bundle: ...)`
    static func preview(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.preview)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SplashVC", bundle: ...)`
    static func splashVC(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.splashVC)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 12 colors.
  struct color {
    /// Color `color-alart`.
    static let colorAlart = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-alart")
    /// Color `color-base`.
    static let colorBase = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-base")
    /// Color `color-black`.
    static let colorBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-black")
    /// Color `color-button`.
    static let colorButton = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-button")
    /// Color `color-line`.
    static let colorLine = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-line")
    /// Color `color-main`.
    static let colorMain = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-main")
    /// Color `color-parts_gray`.
    static let colorParts_gray = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-parts_gray")
    /// Color `color-slider-gray`.
    static let colorSliderGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-slider-gray")
    /// Color `color-slider-sub`.
    static let colorSliderSub = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-slider-sub")
    /// Color `color-sub2`.
    static let colorSub2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-sub2")
    /// Color `color-sub`.
    static let colorSub = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-sub")
    /// Color `color-white`.
    static let colorWhite = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-white")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-alart", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorAlart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorAlart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-base", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorBase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorBase, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-black", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-button", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-line", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorLine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorLine, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-main", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorMain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorMain, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-parts_gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorParts_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorParts_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-slider-gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorSliderGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorSliderGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-slider-sub", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorSliderSub(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorSliderSub, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-sub", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorSub(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorSub, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-sub2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorSub2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorSub2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-white", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorWhite, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 17 files.
  struct file {
    /// Resource file `MstK10_salary.tsv`.
    static let mstK10_salaryTsv = Rswift.FileResource(bundle: R.hostingBundle, name: "MstK10_salary", pathExtension: "tsv")
    /// Resource file `MstK11_entryPlace.tsv`.
    static let mstK11_entryPlaceTsv = Rswift.FileResource(bundle: R.hostingBundle, name: "MstK11_entryPlace", pathExtension: "tsv")
    /// Resource file `MstK13_schoolType.tsv`.
    static let mstK13_schoolTypeTsv = Rswift.FileResource(bundle: R.hostingBundle, name: "MstK13_schoolType", pathExtension: "tsv")
    /// Resource file `MstK14_place.tsv`.
    static let mstK14_placeTsv = Rswift.FileResource(bundle: R.hostingBundle, name: "MstK14_place", pathExtension: "tsv")
    /// Resource file `MstK25_employment.tsv`.
    static let mstK25_employmentTsv = Rswift.FileResource(bundle: R.hostingBundle, name: "MstK25_employment", pathExtension: "tsv")
    /// Resource file `MstK25_gender.tsv`.
    static let mstK25_genderTsv = Rswift.FileResource(bundle: R.hostingBundle, name: "MstK25_gender", pathExtension: "tsv")
    /// Resource file `MstK3_changeCount.tsv`.
    static let mstK3_changeCountTsv = Rswift.FileResource(bundle: R.hostingBundle, name: "MstK3_changeCount", pathExtension: "tsv")
    /// Resource file `MstK4_jobType.tsv`.
    static let mstK4_jobTypeTsv = Rswift.FileResource(bundle: R.hostingBundle, name: "MstK4_jobType", pathExtension: "tsv")
    /// Resource file `MstK5_jobExperimentYear.tsv`.
    static let mstK5_jobExperimentYearTsv = Rswift.FileResource(bundle: R.hostingBundle, name: "MstK5_jobExperimentYear", pathExtension: "tsv")
    /// Resource file `MstK6_businessType.tsv`.
    static let mstK6_businessTypeTsv = Rswift.FileResource(bundle: R.hostingBundle, name: "MstK6_businessType", pathExtension: "tsv")
    /// Resource file `MstK7_skillEnglish.tsv`.
    static let mstK7_skillEnglishTsv = Rswift.FileResource(bundle: R.hostingBundle, name: "MstK7_skillEnglish", pathExtension: "tsv")
    /// Resource file `MstK8_qualification.tsv`.
    static let mstK8_qualificationTsv = Rswift.FileResource(bundle: R.hostingBundle, name: "MstK8_qualification", pathExtension: "tsv")
    /// Resource file `MstK9_employmentType.tsv`.
    static let mstK9_employmentTypeTsv = Rswift.FileResource(bundle: R.hostingBundle, name: "MstK9_employmentType", pathExtension: "tsv")
    /// Resource file `MstL2_prCode.tsv`.
    static let mstL2_prCodeTsv = Rswift.FileResource(bundle: R.hostingBundle, name: "MstL2_prCode", pathExtension: "tsv")
    /// Resource file `MstL3_overtime.tsv`.
    static let mstL3_overtimeTsv = Rswift.FileResource(bundle: R.hostingBundle, name: "MstL3_overtime", pathExtension: "tsv")
    /// Resource file `MstL_skill.tsv`.
    static let mstL_skillTsv = Rswift.FileResource(bundle: R.hostingBundle, name: "MstL_skill", pathExtension: "tsv")
    /// Resource file `MstL_skillYear.tsv`.
    static let mstL_skillYearTsv = Rswift.FileResource(bundle: R.hostingBundle, name: "MstL_skillYear", pathExtension: "tsv")

    /// `bundle.url(forResource: "MstK10_salary", withExtension: "tsv")`
    static func mstK10_salaryTsv(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mstK10_salaryTsv
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MstK11_entryPlace", withExtension: "tsv")`
    static func mstK11_entryPlaceTsv(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mstK11_entryPlaceTsv
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MstK13_schoolType", withExtension: "tsv")`
    static func mstK13_schoolTypeTsv(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mstK13_schoolTypeTsv
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MstK14_place", withExtension: "tsv")`
    static func mstK14_placeTsv(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mstK14_placeTsv
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MstK25_employment", withExtension: "tsv")`
    static func mstK25_employmentTsv(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mstK25_employmentTsv
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MstK25_gender", withExtension: "tsv")`
    static func mstK25_genderTsv(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mstK25_genderTsv
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MstK3_changeCount", withExtension: "tsv")`
    static func mstK3_changeCountTsv(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mstK3_changeCountTsv
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MstK4_jobType", withExtension: "tsv")`
    static func mstK4_jobTypeTsv(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mstK4_jobTypeTsv
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MstK5_jobExperimentYear", withExtension: "tsv")`
    static func mstK5_jobExperimentYearTsv(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mstK5_jobExperimentYearTsv
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MstK6_businessType", withExtension: "tsv")`
    static func mstK6_businessTypeTsv(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mstK6_businessTypeTsv
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MstK7_skillEnglish", withExtension: "tsv")`
    static func mstK7_skillEnglishTsv(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mstK7_skillEnglishTsv
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MstK8_qualification", withExtension: "tsv")`
    static func mstK8_qualificationTsv(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mstK8_qualificationTsv
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MstK9_employmentType", withExtension: "tsv")`
    static func mstK9_employmentTypeTsv(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mstK9_employmentTypeTsv
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MstL2_prCode", withExtension: "tsv")`
    static func mstL2_prCodeTsv(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mstL2_prCodeTsv
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MstL3_overtime", withExtension: "tsv")`
    static func mstL3_overtimeTsv(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mstL3_overtimeTsv
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MstL_skill", withExtension: "tsv")`
    static func mstL_skillTsv(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mstL_skillTsv
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MstL_skillYear", withExtension: "tsv")`
    static func mstL_skillYearTsv(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mstL_skillYearTsv
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 59 images.
  struct image {
    /// Image `arBtm_2`.
    static let arBtm_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "arBtm_2")
    /// Image `arDefaultWhite`.
    static let arDefaultWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "arDefaultWhite")
    /// Image `arTop`.
    static let arTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "arTop")
    /// Image `ar_BL`.
    static let ar_BL = Rswift.ImageResource(bundle: R.hostingBundle, name: "ar_BL")
    /// Image `ar`.
    static let ar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ar")
    /// Image `box`.
    static let box = Rswift.ImageResource(bundle: R.hostingBundle, name: "box")
    /// Image `card_keep`.
    static let card_keep = Rswift.ImageResource(bundle: R.hostingBundle, name: "card_keep")
    /// Image `card`.
    static let card = Rswift.ImageResource(bundle: R.hostingBundle, name: "card")
    /// Image `checkInactive`.
    static let checkInactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkInactive")
    /// Image `checkOff`.
    static let checkOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkOff")
    /// Image `checkOn`.
    static let checkOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkOn")
    /// Image `checkSelectedWhite`.
    static let checkSelectedWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkSelectedWhite")
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `companyName`.
    static let companyName = Rswift.ImageResource(bundle: R.hostingBundle, name: "companyName")
    /// Image `deleteDefault`.
    static let deleteDefault = Rswift.ImageResource(bundle: R.hostingBundle, name: "deleteDefault")
    /// Image `diagnosisSelected`.
    static let diagnosisSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "diagnosisSelected")
    /// Image `diagnosis_gray`.
    static let diagnosis_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "diagnosis_gray")
    /// Image `diagnosis`.
    static let diagnosis = Rswift.ImageResource(bundle: R.hostingBundle, name: "diagnosis")
    /// Image `done02`.
    static let done02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "done02")
    /// Image `editSelected`.
    static let editSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "editSelected")
    /// Image `hukidashi_small`.
    static let hukidashi_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "hukidashi_small")
    /// Image `hukidashi`.
    static let hukidashi = Rswift.ImageResource(bundle: R.hostingBundle, name: "hukidashi")
    /// Image `illust01`.
    static let illust01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "illust01")
    /// Image `illust02`.
    static let illust02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "illust02")
    /// Image `img01`.
    static let img01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img01")
    /// Image `indigator_gray`.
    static let indigator_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "indigator_gray")
    /// Image `indigator_sub`.
    static let indigator_sub = Rswift.ImageResource(bundle: R.hostingBundle, name: "indigator_sub")
    /// Image `keepDefault_GN`.
    static let keepDefault_GN = Rswift.ImageResource(bundle: R.hostingBundle, name: "keepDefault_GN")
    /// Image `keepSelected_GN`.
    static let keepSelected_GN = Rswift.ImageResource(bundle: R.hostingBundle, name: "keepSelected_GN")
    /// Image `keikenshokushu`.
    static let keikenshokushu = Rswift.ImageResource(bundle: R.hostingBundle, name: "keikenshokushu")
    /// Image `likeDefaultBase`.
    static let likeDefaultBase = Rswift.ImageResource(bundle: R.hostingBundle, name: "likeDefaultBase")
    /// Image `likeDefault`.
    static let likeDefault = Rswift.ImageResource(bundle: R.hostingBundle, name: "likeDefault")
    /// Image `likeSelected`.
    static let likeSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "likeSelected")
    /// Image `like_gray`.
    static let like_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "like_gray")
    /// Image `managementDefault_GN`.
    static let managementDefault_GN = Rswift.ImageResource(bundle: R.hostingBundle, name: "managementDefault_GN")
    /// Image `management_GN`.
    static let management_GN = Rswift.ImageResource(bundle: R.hostingBundle, name: "management_GN")
    /// Image `minyuuryoku`.
    static let minyuuryoku = Rswift.ImageResource(bundle: R.hostingBundle, name: "minyuuryoku")
    /// Image `mypageDefault_GN`.
    static let mypageDefault_GN = Rswift.ImageResource(bundle: R.hostingBundle, name: "mypageDefault_GN")
    /// Image `mypage_GN`.
    static let mypage_GN = Rswift.ImageResource(bundle: R.hostingBundle, name: "mypage_GN")
    /// Image `new_GN`.
    static let new_GN = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_GN")
    /// Image `period`.
    static let period = Rswift.ImageResource(bundle: R.hostingBundle, name: "period")
    /// Image `place`.
    static let place = Rswift.ImageResource(bundle: R.hostingBundle, name: "place")
    /// Image `plusDefault`.
    static let plusDefault = Rswift.ImageResource(bundle: R.hostingBundle, name: "plusDefault")
    /// Image `pr`.
    static let pr = Rswift.ImageResource(bundle: R.hostingBundle, name: "pr")
    /// Image `recommendedDefault_GN`.
    static let recommendedDefault_GN = Rswift.ImageResource(bundle: R.hostingBundle, name: "recommendedDefault_GN")
    /// Image `recommendedSelected_GN`.
    static let recommendedSelected_GN = Rswift.ImageResource(bundle: R.hostingBundle, name: "recommendedSelected_GN")
    /// Image `refineDefaultWhiteBase`.
    static let refineDefaultWhiteBase = Rswift.ImageResource(bundle: R.hostingBundle, name: "refineDefaultWhiteBase")
    /// Image `required`.
    static let required = Rswift.ImageResource(bundle: R.hostingBundle, name: "required")
    /// Image `resumeSelected`.
    static let resumeSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "resumeSelected")
    /// Image `resume_gray`.
    static let resume_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "resume_gray")
    /// Image `rogin`.
    static let rogin = Rswift.ImageResource(bundle: R.hostingBundle, name: "rogin")
    /// Image `salary`.
    static let salary = Rswift.ImageResource(bundle: R.hostingBundle, name: "salary")
    /// Image `settingSelected`.
    static let settingSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "settingSelected")
    /// Image `setting_white`.
    static let setting_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting_white")
    /// Image `slider_gray`.
    static let slider_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "slider_gray")
    /// Image `slider_sub`.
    static let slider_sub = Rswift.ImageResource(bundle: R.hostingBundle, name: "slider_sub")
    /// Image `slider_white`.
    static let slider_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "slider_white")
    /// Image `sortDefaultWhiteBase`.
    static let sortDefaultWhiteBase = Rswift.ImageResource(bundle: R.hostingBundle, name: "sortDefaultWhiteBase")
    /// Image `upcoming`.
    static let upcoming = Rswift.ImageResource(bundle: R.hostingBundle, name: "upcoming")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ar", bundle: ..., traitCollection: ...)`
    static func ar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arBtm_2", bundle: ..., traitCollection: ...)`
    static func arBtm_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arBtm_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arDefaultWhite", bundle: ..., traitCollection: ...)`
    static func arDefaultWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arDefaultWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arTop", bundle: ..., traitCollection: ...)`
    static func arTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arTop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ar_BL", bundle: ..., traitCollection: ...)`
    static func ar_BL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ar_BL, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "box", bundle: ..., traitCollection: ...)`
    static func box(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.box, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "card", bundle: ..., traitCollection: ...)`
    static func card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "card_keep", bundle: ..., traitCollection: ...)`
    static func card_keep(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.card_keep, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkInactive", bundle: ..., traitCollection: ...)`
    static func checkInactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkInactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkOff", bundle: ..., traitCollection: ...)`
    static func checkOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkOn", bundle: ..., traitCollection: ...)`
    static func checkOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkOn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkSelectedWhite", bundle: ..., traitCollection: ...)`
    static func checkSelectedWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkSelectedWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "companyName", bundle: ..., traitCollection: ...)`
    static func companyName(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.companyName, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deleteDefault", bundle: ..., traitCollection: ...)`
    static func deleteDefault(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deleteDefault, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "diagnosis", bundle: ..., traitCollection: ...)`
    static func diagnosis(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.diagnosis, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "diagnosisSelected", bundle: ..., traitCollection: ...)`
    static func diagnosisSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.diagnosisSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "diagnosis_gray", bundle: ..., traitCollection: ...)`
    static func diagnosis_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.diagnosis_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "done02", bundle: ..., traitCollection: ...)`
    static func done02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.done02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "editSelected", bundle: ..., traitCollection: ...)`
    static func editSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hukidashi", bundle: ..., traitCollection: ...)`
    static func hukidashi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hukidashi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hukidashi_small", bundle: ..., traitCollection: ...)`
    static func hukidashi_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hukidashi_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "illust01", bundle: ..., traitCollection: ...)`
    static func illust01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.illust01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "illust02", bundle: ..., traitCollection: ...)`
    static func illust02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.illust02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img01", bundle: ..., traitCollection: ...)`
    static func img01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "indigator_gray", bundle: ..., traitCollection: ...)`
    static func indigator_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.indigator_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "indigator_sub", bundle: ..., traitCollection: ...)`
    static func indigator_sub(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.indigator_sub, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "keepDefault_GN", bundle: ..., traitCollection: ...)`
    static func keepDefault_GN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.keepDefault_GN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "keepSelected_GN", bundle: ..., traitCollection: ...)`
    static func keepSelected_GN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.keepSelected_GN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "keikenshokushu", bundle: ..., traitCollection: ...)`
    static func keikenshokushu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.keikenshokushu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "likeDefault", bundle: ..., traitCollection: ...)`
    static func likeDefault(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likeDefault, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "likeDefaultBase", bundle: ..., traitCollection: ...)`
    static func likeDefaultBase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likeDefaultBase, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "likeSelected", bundle: ..., traitCollection: ...)`
    static func likeSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likeSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like_gray", bundle: ..., traitCollection: ...)`
    static func like_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "managementDefault_GN", bundle: ..., traitCollection: ...)`
    static func managementDefault_GN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.managementDefault_GN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "management_GN", bundle: ..., traitCollection: ...)`
    static func management_GN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.management_GN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "minyuuryoku", bundle: ..., traitCollection: ...)`
    static func minyuuryoku(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minyuuryoku, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mypageDefault_GN", bundle: ..., traitCollection: ...)`
    static func mypageDefault_GN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mypageDefault_GN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mypage_GN", bundle: ..., traitCollection: ...)`
    static func mypage_GN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mypage_GN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "new_GN", bundle: ..., traitCollection: ...)`
    static func new_GN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_GN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "period", bundle: ..., traitCollection: ...)`
    static func period(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.period, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "place", bundle: ..., traitCollection: ...)`
    static func place(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.place, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plusDefault", bundle: ..., traitCollection: ...)`
    static func plusDefault(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plusDefault, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pr", bundle: ..., traitCollection: ...)`
    static func pr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "recommendedDefault_GN", bundle: ..., traitCollection: ...)`
    static func recommendedDefault_GN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.recommendedDefault_GN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "recommendedSelected_GN", bundle: ..., traitCollection: ...)`
    static func recommendedSelected_GN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.recommendedSelected_GN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refineDefaultWhiteBase", bundle: ..., traitCollection: ...)`
    static func refineDefaultWhiteBase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refineDefaultWhiteBase, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "required", bundle: ..., traitCollection: ...)`
    static func required(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.required, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "resumeSelected", bundle: ..., traitCollection: ...)`
    static func resumeSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.resumeSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "resume_gray", bundle: ..., traitCollection: ...)`
    static func resume_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.resume_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rogin", bundle: ..., traitCollection: ...)`
    static func rogin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rogin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "salary", bundle: ..., traitCollection: ...)`
    static func salary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.salary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settingSelected", bundle: ..., traitCollection: ...)`
    static func settingSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "setting_white", bundle: ..., traitCollection: ...)`
    static func setting_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slider_gray", bundle: ..., traitCollection: ...)`
    static func slider_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slider_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slider_sub", bundle: ..., traitCollection: ...)`
    static func slider_sub(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slider_sub, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slider_white", bundle: ..., traitCollection: ...)`
    static func slider_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slider_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sortDefaultWhiteBase", bundle: ..., traitCollection: ...)`
    static func sortDefaultWhiteBase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sortDefaultWhiteBase, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "upcoming", bundle: ..., traitCollection: ...)`
    static func upcoming(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.upcoming, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 21 nibs.
  struct nib {
    /// Nib `HEditDrumTBCell`.
    static let hEditDrumTBCell = _R.nib._HEditDrumTBCell()
    /// Nib `HEditTextTBCell`.
    static let hEditTextTBCell = _R.nib._HEditTextTBCell()
    /// Nib `HEditZipcodeTBCell`.
    static let hEditZipcodeTBCell = _R.nib._HEditZipcodeTBCell()
    /// Nib `HPreviewTBCell`.
    static let hPreviewTBCell = _R.nib._HPreviewTBCell()
    /// Nib `JobDetailArticleCell`.
    static let jobDetailArticleCell = _R.nib._JobDetailArticleCell()
    /// Nib `JobDetailArticleHeaderView`.
    static let jobDetailArticleHeaderView = _R.nib._JobDetailArticleHeaderView()
    /// Nib `JobDetailDataCell`.
    static let jobDetailDataCell = _R.nib._JobDetailDataCell()
    /// Nib `JobDetailGuideBookHeaderView`.
    static let jobDetailGuideBookHeaderView = _R.nib._JobDetailGuideBookHeaderView()
    /// Nib `JobDetailItemCell`.
    static let jobDetailItemCell = _R.nib._JobDetailItemCell()
    /// Nib `JobDetailPRCodeTagsCell`.
    static let jobDetailPRCodeTagsCell = _R.nib._JobDetailPRCodeTagsCell()
    /// Nib `JobDetailSalaryExampleCell`.
    static let jobDetailSalaryExampleCell = _R.nib._JobDetailSalaryExampleCell()
    /// Nib `JobDetailWorkCell`.
    static let jobDetailWorkCell = _R.nib._JobDetailWorkCell()
    /// Nib `JobOfferBigCardCell`.
    static let jobOfferBigCardCell = _R.nib._JobOfferBigCardCell()
    /// Nib `JobOfferCardMoreCell`.
    static let jobOfferCardMoreCell = _R.nib._JobOfferCardMoreCell()
    /// Nib `JobOfferCardReloadCell`.
    static let jobOfferCardReloadCell = _R.nib._JobOfferCardReloadCell()
    /// Nib `KeepCardCell`.
    static let keepCardCell = _R.nib._KeepCardCell()
    /// Nib `NaviButtonsView`.
    static let naviButtonsView = _R.nib._NaviButtonsView()
    /// Nib `NoCardView`.
    static let noCardView = _R.nib._NoCardView()
    /// Nib `SubSelectDaiTBCell`.
    static let subSelectDaiTBCell = _R.nib._SubSelectDaiTBCell()
    /// Nib `SubSelectSyouTBCell`.
    static let subSelectSyouTBCell = _R.nib._SubSelectSyouTBCell()
    /// Nib `SubSelectTBCell`.
    static let subSelectTBCell = _R.nib._SubSelectTBCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HEditDrumTBCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.hEditDrumTBCell) instead")
    static func hEditDrumTBCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hEditDrumTBCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HEditTextTBCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.hEditTextTBCell) instead")
    static func hEditTextTBCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hEditTextTBCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HEditZipcodeTBCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.hEditZipcodeTBCell) instead")
    static func hEditZipcodeTBCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hEditZipcodeTBCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HPreviewTBCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.hPreviewTBCell) instead")
    static func hPreviewTBCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hPreviewTBCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "JobDetailArticleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.jobDetailArticleCell) instead")
    static func jobDetailArticleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jobDetailArticleCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "JobDetailArticleHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.jobDetailArticleHeaderView) instead")
    static func jobDetailArticleHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jobDetailArticleHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "JobDetailDataCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.jobDetailDataCell) instead")
    static func jobDetailDataCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jobDetailDataCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "JobDetailGuideBookHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.jobDetailGuideBookHeaderView) instead")
    static func jobDetailGuideBookHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jobDetailGuideBookHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "JobDetailItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.jobDetailItemCell) instead")
    static func jobDetailItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jobDetailItemCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "JobDetailPRCodeTagsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.jobDetailPRCodeTagsCell) instead")
    static func jobDetailPRCodeTagsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jobDetailPRCodeTagsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "JobDetailSalaryExampleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.jobDetailSalaryExampleCell) instead")
    static func jobDetailSalaryExampleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jobDetailSalaryExampleCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "JobDetailWorkCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.jobDetailWorkCell) instead")
    static func jobDetailWorkCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jobDetailWorkCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "JobOfferBigCardCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.jobOfferBigCardCell) instead")
    static func jobOfferBigCardCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jobOfferBigCardCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "JobOfferCardMoreCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.jobOfferCardMoreCell) instead")
    static func jobOfferCardMoreCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jobOfferCardMoreCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "JobOfferCardReloadCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.jobOfferCardReloadCell) instead")
    static func jobOfferCardReloadCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jobOfferCardReloadCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "KeepCardCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.keepCardCell) instead")
    static func keepCardCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.keepCardCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NaviButtonsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.naviButtonsView) instead")
    static func naviButtonsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.naviButtonsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NoCardView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.noCardView) instead")
    static func noCardView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.noCardView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SubSelectDaiTBCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.subSelectDaiTBCell) instead")
    static func subSelectDaiTBCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.subSelectDaiTBCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SubSelectSyouTBCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.subSelectSyouTBCell) instead")
    static func subSelectSyouTBCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.subSelectSyouTBCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SubSelectTBCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.subSelectTBCell) instead")
    static func subSelectTBCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.subSelectTBCell)
    }
    #endif

    static func hEditDrumTBCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HEditDrumTBCell? {
      return R.nib.hEditDrumTBCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HEditDrumTBCell
    }

    static func hEditTextTBCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HEditTextTBCell? {
      return R.nib.hEditTextTBCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HEditTextTBCell
    }

    static func hEditZipcodeTBCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HEditZipcodeTBCell? {
      return R.nib.hEditZipcodeTBCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HEditZipcodeTBCell
    }

    static func hPreviewTBCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HPreviewTBCell? {
      return R.nib.hPreviewTBCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HPreviewTBCell
    }

    static func jobDetailArticleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobDetailArticleCell? {
      return R.nib.jobDetailArticleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobDetailArticleCell
    }

    static func jobDetailArticleHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobDetailArticleHeaderView? {
      return R.nib.jobDetailArticleHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobDetailArticleHeaderView
    }

    static func jobDetailDataCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobDetailDataCell? {
      return R.nib.jobDetailDataCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobDetailDataCell
    }

    static func jobDetailGuideBookHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobDetailGuideBookHeaderView? {
      return R.nib.jobDetailGuideBookHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobDetailGuideBookHeaderView
    }

    static func jobDetailItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobDetailItemCell? {
      return R.nib.jobDetailItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobDetailItemCell
    }

    static func jobDetailPRCodeTagsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobDetailPRCodeTagsCell? {
      return R.nib.jobDetailPRCodeTagsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobDetailPRCodeTagsCell
    }

    static func jobDetailSalaryExampleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobDetailSalaryExampleCell? {
      return R.nib.jobDetailSalaryExampleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobDetailSalaryExampleCell
    }

    static func jobDetailWorkCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobDetailWorkCell? {
      return R.nib.jobDetailWorkCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobDetailWorkCell
    }

    static func jobOfferBigCardCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobOfferBigCardCell? {
      return R.nib.jobOfferBigCardCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobOfferBigCardCell
    }

    static func jobOfferCardMoreCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobOfferCardMoreCell? {
      return R.nib.jobOfferCardMoreCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobOfferCardMoreCell
    }

    static func jobOfferCardReloadCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobOfferCardReloadCell? {
      return R.nib.jobOfferCardReloadCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobOfferCardReloadCell
    }

    static func keepCardCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> KeepCardCell? {
      return R.nib.keepCardCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? KeepCardCell
    }

    static func naviButtonsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NaviButtonsView? {
      return R.nib.naviButtonsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NaviButtonsView
    }

    static func noCardView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NoCardView? {
      return R.nib.noCardView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NoCardView
    }

    static func subSelectDaiTBCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubSelectDaiTBCell? {
      return R.nib.subSelectDaiTBCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubSelectDaiTBCell
    }

    static func subSelectSyouTBCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubSelectSyouTBCell? {
      return R.nib.subSelectSyouTBCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubSelectSyouTBCell
    }

    static func subSelectTBCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubSelectTBCell? {
      return R.nib.subSelectTBCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubSelectTBCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 7 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `Cell_HEditDrumTBCell`.
    static let cell_HEditDrumTBCell: Rswift.ReuseIdentifier<HEditDrumTBCell> = Rswift.ReuseIdentifier(identifier: "Cell_HEditDrumTBCell")
    /// Reuse identifier `Cell_HEditTextTBCell`.
    static let cell_HEditTextTBCell: Rswift.ReuseIdentifier<HEditTextTBCell> = Rswift.ReuseIdentifier(identifier: "Cell_HEditTextTBCell")
    /// Reuse identifier `Cell_HEditZipcodeTBCell`.
    static let cell_HEditZipcodeTBCell: Rswift.ReuseIdentifier<HEditZipcodeTBCell> = Rswift.ReuseIdentifier(identifier: "Cell_HEditZipcodeTBCell")
    /// Reuse identifier `Cell_HPreviewTBCell`.
    static let cell_HPreviewTBCell: Rswift.ReuseIdentifier<HPreviewTBCell> = Rswift.ReuseIdentifier(identifier: "Cell_HPreviewTBCell")
    /// Reuse identifier `Cell_SubSelectDaiTBCell`.
    static let cell_SubSelectDaiTBCell: Rswift.ReuseIdentifier<SubSelectDaiTBCell> = Rswift.ReuseIdentifier(identifier: "Cell_SubSelectDaiTBCell")
    /// Reuse identifier `Cell_SubSelectSyouTBCell`.
    static let cell_SubSelectSyouTBCell: Rswift.ReuseIdentifier<SubSelectSyouTBCell> = Rswift.ReuseIdentifier(identifier: "Cell_SubSelectSyouTBCell")
    /// Reuse identifier `Cell_SubSelectTBCell`.
    static let cell_SubSelectTBCell: Rswift.ReuseIdentifier<SubSelectTBCell> = Rswift.ReuseIdentifier(identifier: "Cell_SubSelectTBCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _JobDetailDataCell.validate()
      try _JobOfferBigCardCell.validate()
      try _KeepCardCell.validate()
      try _NoCardView.validate()
    }

    struct _HEditDrumTBCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HEditDrumTBCell

      let bundle = R.hostingBundle
      let identifier = "Cell_HEditDrumTBCell"
      let name = "HEditDrumTBCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HEditDrumTBCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HEditDrumTBCell
      }

      fileprivate init() {}
    }

    struct _HEditTextTBCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HEditTextTBCell

      let bundle = R.hostingBundle
      let identifier = "Cell_HEditTextTBCell"
      let name = "HEditTextTBCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HEditTextTBCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HEditTextTBCell
      }

      fileprivate init() {}
    }

    struct _HEditZipcodeTBCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HEditZipcodeTBCell

      let bundle = R.hostingBundle
      let identifier = "Cell_HEditZipcodeTBCell"
      let name = "HEditZipcodeTBCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HEditZipcodeTBCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HEditZipcodeTBCell
      }

      fileprivate init() {}
    }

    struct _HPreviewTBCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HPreviewTBCell

      let bundle = R.hostingBundle
      let identifier = "Cell_HPreviewTBCell"
      let name = "HPreviewTBCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HPreviewTBCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HPreviewTBCell
      }

      fileprivate init() {}
    }

    struct _JobDetailArticleCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "JobDetailArticleCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobDetailArticleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobDetailArticleCell
      }

      fileprivate init() {}
    }

    struct _JobDetailArticleHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "JobDetailArticleHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobDetailArticleHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobDetailArticleHeaderView
      }

      fileprivate init() {}
    }

    struct _JobDetailDataCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "JobDetailDataCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobDetailDataCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobDetailDataCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "companyName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'companyName' is used in nib 'JobDetailDataCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "period", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'period' is used in nib 'JobDetailDataCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "place", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'place' is used in nib 'JobDetailDataCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "salary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'salary' is used in nib 'JobDetailDataCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "color-slider-gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'color-slider-gray' is used in storyboard 'JobDetailDataCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "color-slider-sub", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'color-slider-sub' is used in storyboard 'JobDetailDataCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "color-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'color-white' is used in storyboard 'JobDetailDataCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _JobDetailGuideBookHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "JobDetailGuideBookHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobDetailGuideBookHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobDetailGuideBookHeaderView
      }

      fileprivate init() {}
    }

    struct _JobDetailItemCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "JobDetailItemCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobDetailItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobDetailItemCell
      }

      fileprivate init() {}
    }

    struct _JobDetailPRCodeTagsCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "JobDetailPRCodeTagsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobDetailPRCodeTagsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobDetailPRCodeTagsCell
      }

      fileprivate init() {}
    }

    struct _JobDetailSalaryExampleCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "JobDetailSalaryExampleCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobDetailSalaryExampleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobDetailSalaryExampleCell
      }

      fileprivate init() {}
    }

    struct _JobDetailWorkCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "JobDetailWorkCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobDetailWorkCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobDetailWorkCell
      }

      fileprivate init() {}
    }

    struct _JobOfferBigCardCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "JobOfferBigCardCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobOfferBigCardCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobOfferBigCardCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'card' is used in nib 'JobOfferBigCardCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "companyName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'companyName' is used in nib 'JobOfferBigCardCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "deleteDefault", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'deleteDefault' is used in nib 'JobOfferBigCardCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "likeSelected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'likeSelected' is used in nib 'JobOfferBigCardCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "place", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'place' is used in nib 'JobOfferBigCardCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "salary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'salary' is used in nib 'JobOfferBigCardCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "upcoming", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'upcoming' is used in nib 'JobOfferBigCardCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "color-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'color-black' is used in storyboard 'JobOfferBigCardCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "color-line", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'color-line' is used in storyboard 'JobOfferBigCardCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "color-sub", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'color-sub' is used in storyboard 'JobOfferBigCardCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "color-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'color-white' is used in storyboard 'JobOfferBigCardCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _JobOfferCardMoreCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "JobOfferCardMoreCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobOfferCardMoreCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobOfferCardMoreCell
      }

      fileprivate init() {}
    }

    struct _JobOfferCardReloadCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "JobOfferCardReloadCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobOfferCardReloadCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobOfferCardReloadCell
      }

      fileprivate init() {}
    }

    struct _KeepCardCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "KeepCardCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> KeepCardCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? KeepCardCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "card_keep", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'card_keep' is used in nib 'KeepCardCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "companyName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'companyName' is used in nib 'KeepCardCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like_gray' is used in nib 'KeepCardCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "place", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'place' is used in nib 'KeepCardCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "salary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'salary' is used in nib 'KeepCardCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "upcoming", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'upcoming' is used in nib 'KeepCardCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "color-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'color-black' is used in storyboard 'KeepCardCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "color-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'color-white' is used in storyboard 'KeepCardCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _NaviButtonsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NaviButtonsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NaviButtonsView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NaviButtonsView
      }

      fileprivate init() {}
    }

    struct _NoCardView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NoCardView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NoCardView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NoCardView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'card' is used in nib 'NoCardView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "illust02", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'illust02' is used in nib 'NoCardView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "color-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'color-white' is used in storyboard 'NoCardView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SubSelectDaiTBCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SubSelectDaiTBCell

      let bundle = R.hostingBundle
      let identifier = "Cell_SubSelectDaiTBCell"
      let name = "SubSelectDaiTBCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubSelectDaiTBCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubSelectDaiTBCell
      }

      fileprivate init() {}
    }

    struct _SubSelectSyouTBCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SubSelectSyouTBCell

      let bundle = R.hostingBundle
      let identifier = "Cell_SubSelectSyouTBCell"
      let name = "SubSelectSyouTBCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubSelectSyouTBCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubSelectSyouTBCell
      }

      fileprivate init() {}
    }

    struct _SubSelectTBCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SubSelectTBCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubSelectTBCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubSelectTBCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try baseTabBC.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try edit.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try editablePopup.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try entryVC.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try homeVC.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try jobOfferDetailVC.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try keepListVC.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try myPageVC.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try preview.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try splashVC.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct baseTabBC: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BaseTabBC"
      let sbid_BaseTabBC = StoryboardViewControllerResource<BaseTabBC>(identifier: "Sbid_BaseTabBC")

      func sbid_BaseTabBC(_: Void = ()) -> BaseTabBC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sbid_BaseTabBC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "keepDefault_GN", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'keepDefault_GN' is used in storyboard 'BaseTabBC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "keepSelected_GN", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'keepSelected_GN' is used in storyboard 'BaseTabBC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "managementDefault_GN", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'managementDefault_GN' is used in storyboard 'BaseTabBC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "management_GN", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'management_GN' is used in storyboard 'BaseTabBC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mypageDefault_GN", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mypageDefault_GN' is used in storyboard 'BaseTabBC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mypage_GN", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mypage_GN' is used in storyboard 'BaseTabBC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "recommendedDefault_GN", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'recommendedDefault_GN' is used in storyboard 'BaseTabBC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "recommendedSelected_GN", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'recommendedSelected_GN' is used in storyboard 'BaseTabBC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.baseTabBC().sbid_BaseTabBC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sbid_BaseTabBC' could not be loaded from storyboard 'BaseTabBC' as 'BaseTabBC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct edit: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Edit"
      let sbid_ProfileEditVC = StoryboardViewControllerResource<ProfileEditVC>(identifier: "Sbid_ProfileEditVC")

      func sbid_ProfileEditVC(_: Void = ()) -> ProfileEditVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sbid_ProfileEditVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in storyboard 'Edit', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "color-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'color-black' is used in storyboard 'Edit', but couldn't be loaded.") }
        }
        if _R.storyboard.edit().sbid_ProfileEditVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sbid_ProfileEditVC' could not be loaded from storyboard 'Edit' as 'ProfileEditVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct editablePopup: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EditablePopup"
      let sbid_SubSelectMultiVC = StoryboardViewControllerResource<SubSelectMultiVC>(identifier: "Sbid_SubSelectMultiVC")
      let sbid_SubSelectSingleVC = StoryboardViewControllerResource<SubSelectSingleVC>(identifier: "Sbid_SubSelectSingleVC")
      let sbid_SubSelectSpecialVC = StoryboardViewControllerResource<SubSelectSpecialVC>(identifier: "Sbid_SubSelectSpecialVC")

      func sbid_SubSelectMultiVC(_: Void = ()) -> SubSelectMultiVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sbid_SubSelectMultiVC)
      }

      func sbid_SubSelectSingleVC(_: Void = ()) -> SubSelectSingleVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sbid_SubSelectSingleVC)
      }

      func sbid_SubSelectSpecialVC(_: Void = ()) -> SubSelectSpecialVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sbid_SubSelectSpecialVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.editablePopup().sbid_SubSelectMultiVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sbid_SubSelectMultiVC' could not be loaded from storyboard 'EditablePopup' as 'SubSelectMultiVC'.") }
        if _R.storyboard.editablePopup().sbid_SubSelectSingleVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sbid_SubSelectSingleVC' could not be loaded from storyboard 'EditablePopup' as 'SubSelectSingleVC'.") }
        if _R.storyboard.editablePopup().sbid_SubSelectSpecialVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sbid_SubSelectSpecialVC' could not be loaded from storyboard 'EditablePopup' as 'SubSelectSpecialVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct entryVC: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = EntryVC

      let bundle = R.hostingBundle
      let name = "EntryVC"
      let sbid_EntryVC = StoryboardViewControllerResource<EntryVC>(identifier: "Sbid_EntryVC")

      func sbid_EntryVC(_: Void = ()) -> EntryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sbid_EntryVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.entryVC().sbid_EntryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sbid_EntryVC' could not be loaded from storyboard 'EntryVC' as 'EntryVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct homeVC: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HomeVC

      let bundle = R.hostingBundle
      let name = "HomeVC"
      let sbid_HomeVC = StoryboardViewControllerResource<HomeVC>(identifier: "Sbid_HomeVC")

      func sbid_HomeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sbid_HomeVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.homeVC().sbid_HomeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sbid_HomeVC' could not be loaded from storyboard 'HomeVC' as 'HomeVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct jobOfferDetailVC: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "JobOfferDetailVC"
      let sbid_JobOfferDetailVC = StoryboardViewControllerResource<JobOfferDetailVC>(identifier: "Sbid_JobOfferDetailVC")

      func sbid_JobOfferDetailVC(_: Void = ()) -> JobOfferDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sbid_JobOfferDetailVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "color-base", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'color-base' is used in storyboard 'JobOfferDetailVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "color-line", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'color-line' is used in storyboard 'JobOfferDetailVC', but couldn't be loaded.") }
        }
        if _R.storyboard.jobOfferDetailVC().sbid_JobOfferDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sbid_JobOfferDetailVC' could not be loaded from storyboard 'JobOfferDetailVC' as 'JobOfferDetailVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct keepListVC: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = KeepListVC

      let bundle = R.hostingBundle
      let name = "KeepListVC"
      let sbid_KeepListVC = StoryboardViewControllerResource<KeepListVC>(identifier: "Sbid_KeepListVC")

      func sbid_KeepListVC(_: Void = ()) -> KeepListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sbid_KeepListVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.keepListVC().sbid_KeepListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sbid_KeepListVC' could not be loaded from storyboard 'KeepListVC' as 'KeepListVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct myPageVC: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MyPageVC

      let bundle = R.hostingBundle
      let name = "MyPageVC"
      let sbid_MyPageVC = StoryboardViewControllerResource<MyPageVC>(identifier: "Sbid_MyPageVC")

      func sbid_MyPageVC(_: Void = ()) -> MyPageVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sbid_MyPageVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.myPageVC().sbid_MyPageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sbid_MyPageVC' could not be loaded from storyboard 'MyPageVC' as 'MyPageVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct preview: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Preview"
      let sbid_ProfilePreviewVC = StoryboardViewControllerResource<ProfilePreviewVC>(identifier: "Sbid_ProfilePreviewVC")

      func sbid_ProfilePreviewVC(_: Void = ()) -> ProfilePreviewVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sbid_ProfilePreviewVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.preview().sbid_ProfilePreviewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sbid_ProfilePreviewVC' could not be loaded from storyboard 'Preview' as 'ProfilePreviewVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct splashVC: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SplashVC

      let bundle = R.hostingBundle
      let name = "SplashVC"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
