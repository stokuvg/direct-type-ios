//
// TodosAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import PromiseKit



open class TodosAPI {
    /**
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func todosControllerCreateTodo(body: CreateTodoRequestDTO, completion: @escaping ((_ data: CreateTodoResponseDTO?,_ error: Error?) -> Void)) {
        todosControllerCreateTodoWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - parameter body: (body)  
     - returns: Promise<CreateTodoResponseDTO>
     */
    open class func todosControllerCreateTodo( body: CreateTodoRequestDTO) -> Promise<CreateTodoResponseDTO> {
        //let deferred = Promise<CreateTodoResponseDTO>.pending()
        let (promise, resolver) = Promise<CreateTodoResponseDTO>.pending()
        todosControllerCreateTodo(body: body) { data, error in
            if let error = error {
                //deferred.reject(error)
                resolver.reject(error)
            } else {
                //deferred.fulfill(data!)
                resolver.fulfill(data!)
            }
        }
        //return deferred.promise
        return promise
    }

    /**
     - POST /todos
     - :
       - type: http
       - name: bearer
     - examples: [{contentType=application/json, example={
  "note" : "夕食の献立を考える",
  "createdAt" : "2020-01-22T08:36:08.816Z"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<CreateTodoResponseDTO> 
     */
    open class func todosControllerCreateTodoWithRequestBuilder(body: CreateTodoRequestDTO) -> RequestBuilder<CreateTodoResponseDTO> {
        let path = "/todos"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CreateTodoResponseDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     - parameter createdAt: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func todosControllerDeleteTodo(createdAt: String, completion: @escaping ((_ data: DeleteTodoResponseDTO?,_ error: Error?) -> Void)) {
        todosControllerDeleteTodoWithRequestBuilder(createdAt: createdAt).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - parameter createdAt: (path)  
     - returns: Promise<DeleteTodoResponseDTO>
     */
    open class func todosControllerDeleteTodo( createdAt: String) -> Promise<DeleteTodoResponseDTO> {
        //let deferred = Promise<DeleteTodoResponseDTO>.pending()
        let (promise, resolver) = Promise<DeleteTodoResponseDTO>.pending()
        todosControllerDeleteTodo(createdAt: createdAt) { data, error in
            if let error = error {
                //deferred.reject(error)
                resolver.reject(error)
            } else {
                //deferred.fulfill(data!)
                resolver.fulfill(data!)
            }
        }
        //return deferred.promise
        return promise
    }

    /**
     - DELETE /todos/{createdAt}
     - :
       - type: http
       - name: bearer
     - examples: [{contentType=application/json, example={
  "note" : "夕食の献立を考える",
  "createdAt" : "2020-01-22T08:36:08.816Z"
}}]
     - parameter createdAt: (path)  

     - returns: RequestBuilder<DeleteTodoResponseDTO> 
     */
    open class func todosControllerDeleteTodoWithRequestBuilder(createdAt: String) -> RequestBuilder<DeleteTodoResponseDTO> {
        var path = "/todos/{createdAt}"
        let createdAtPreEscape = "\(createdAt)"
        let createdAtPostEscape = createdAtPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{createdAt}", with: createdAtPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeleteTodoResponseDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter body: (body)       - parameter createdAt: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func todosControllerEditTodo(body: EditTodoRequestDTO, createdAt: String, completion: @escaping ((_ data: EditTodoResponseDTO?,_ error: Error?) -> Void)) {
        todosControllerEditTodoWithRequestBuilder(body: body, createdAt: createdAt).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - parameter body: (body)       - parameter createdAt: (path)  
     - returns: Promise<EditTodoResponseDTO>
     */
    open class func todosControllerEditTodo( body: EditTodoRequestDTO,  createdAt: String) -> Promise<EditTodoResponseDTO> {
        //let deferred = Promise<EditTodoResponseDTO>.pending()
        let (promise, resolver) = Promise<EditTodoResponseDTO>.pending()
        todosControllerEditTodo(body: body, createdAt: createdAt) { data, error in
            if let error = error {
                //deferred.reject(error)
                resolver.reject(error)
            } else {
                //deferred.fulfill(data!)
                resolver.fulfill(data!)
            }
        }
        //return deferred.promise
        return promise
    }

    /**
     - PATCH /todos/{createdAt}
     - :
       - type: http
       - name: bearer
     - examples: [{contentType=application/json, example={
  "note" : "夕食の献立を考える",
  "createdAt" : "2020-01-22T08:36:08.816Z"
}}]
     - parameter body: (body)       - parameter createdAt: (path)  

     - returns: RequestBuilder<EditTodoResponseDTO> 
     */
    open class func todosControllerEditTodoWithRequestBuilder(body: EditTodoRequestDTO, createdAt: String) -> RequestBuilder<EditTodoResponseDTO> {
        var path = "/todos/{createdAt}"
        let createdAtPreEscape = "\(createdAt)"
        let createdAtPostEscape = createdAtPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{createdAt}", with: createdAtPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EditTodoResponseDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     - parameter createdAt: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func todosControllerFind(createdAt: String, completion: @escaping ((_ data: GetTodoResponseDTO?,_ error: Error?) -> Void)) {
        todosControllerFindWithRequestBuilder(createdAt: createdAt).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - parameter createdAt: (path)  
     - returns: Promise<GetTodoResponseDTO>
     */
    open class func todosControllerFind( createdAt: String) -> Promise<GetTodoResponseDTO> {
        //let deferred = Promise<GetTodoResponseDTO>.pending()
        let (promise, resolver) = Promise<GetTodoResponseDTO>.pending()
        todosControllerFind(createdAt: createdAt) { data, error in
            if let error = error {
                //deferred.reject(error)
                resolver.reject(error)
            } else {
                //deferred.fulfill(data!)
                resolver.fulfill(data!)
            }
        }
        //return deferred.promise
        return promise
    }

    /**
     - GET /todos/{createdAt}
     - :
       - type: http
       - name: bearer
     - examples: [{contentType=application/json, example={
  "note" : "夕食の献立を考える",
  "createdAt" : "2020-01-22T08:36:08.816Z"
}}]
     - parameter createdAt: (path)  

     - returns: RequestBuilder<GetTodoResponseDTO> 
     */
    open class func todosControllerFindWithRequestBuilder(createdAt: String) -> RequestBuilder<GetTodoResponseDTO> {
        var path = "/todos/{createdAt}"
        let createdAtPreEscape = "\(createdAt)"
        let createdAtPostEscape = createdAtPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{createdAt}", with: createdAtPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GetTodoResponseDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func todosControllerFindAll(completion: @escaping ((_ data: [GetTodoResponseDTO]?,_ error: Error?) -> Void)) {
        todosControllerFindAllWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**

     - returns: Promise<[GetTodoResponseDTO]>
     */
    open class func todosControllerFindAll() -> Promise<[GetTodoResponseDTO]> {
        //let deferred = Promise<[GetTodoResponseDTO]>.pending()
        let (promise, resolver) = Promise<[GetTodoResponseDTO]>.pending()
        todosControllerFindAll() { data, error in
            if let error = error {
                //deferred.reject(error)
                resolver.reject(error)
            } else {
                //deferred.fulfill(data!)
                resolver.fulfill(data!)
            }
        }
        //return deferred.promise
        return promise
    }

    /**
     - GET /todos
     - :
       - type: http
       - name: bearer
     - examples: [{contentType=application/json, example=[ {
  "note" : "夕食の献立を考える",
  "createdAt" : "2020-01-22T08:36:08.816Z"
}, {
  "note" : "夕食の献立を考える",
  "createdAt" : "2020-01-22T08:36:08.816Z"
} ]}]

     - returns: RequestBuilder<[GetTodoResponseDTO]> 
     */
    open class func todosControllerFindAllWithRequestBuilder() -> RequestBuilder<[GetTodoResponseDTO]> {
        let path = "/todos"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[GetTodoResponseDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
